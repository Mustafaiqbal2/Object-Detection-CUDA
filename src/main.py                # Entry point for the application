import cv2
import yaml
from models.detector import ObjectDetector
from models.tracker import ObjectTracker

def load_config(config_path):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def main():
    # Load configuration
    config = load_config('configs/default.yaml')

    # Initialize webcam
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Could not open webcam.")
        return

    # Load object detection model
    detector = ObjectDetector(model_path=config['model_path'])
    
    # Initialize object tracker
    tracker = ObjectTracker()

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Could not read frame.")
            break

        # Perform object detection
        detections = detector.detect(frame)

        # Update tracker with detections
        tracked_objects = tracker.update(detections)

        # Visualization (optional)
        # visualization.draw(frame, tracked_objects)

        # Display the resulting frame
        cv2.imshow('Object Tracking', frame)

        # Break the loop on 'q' key press
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the webcam and close windows
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()